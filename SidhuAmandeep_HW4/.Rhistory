z.stats <- summary(rnes.glm2)$coefficients/summary(rnes.glm2)$standard.errors #for Wald tests
p.values <- (1 - pnorm(abs(z.stats), 0, 1)) * 2
p.values
summary(prog.glm)
wafetab
pi.hatsb
#assume that 'no' is the baseline
Beta_0 <- log(0.2577778/0.7422222)
Beta_0
Beta_0 <- log(0.2577778/1-0.2577778)
Beta_0
Beta_0 <- log(0.2577778/(1-0.2577778))
Beta_0
#assume that 'no' is the baseline
Beta_0 <- log(0.2577778/(1-0.2577778))
temp <- log(0.7422222/(1-0.7422222))
Beta_1 <- temp - Beta_0
Beta_0
Beta_1
pi.hatsm
#assume that 'no' is the baseline
Beta_0 <- log(0.65975309/(1-0.65975309))
temp <- log(0.08246914/(1-0.08246914))
Beta_1 <- temp - Beta_0
Beta_0
Beta_1
#import the dataset
progData <- read.csv("program.csv")
library(nnet)
prog.glm <- multinom(prog~ses+write, data=progData)
summary(prog.glm)
#I will only give the first 6 to save space
head(prog.glm$fitted.values)
#I will only give the first 6 to save space
head(prog.glm$fitted.values)
#probabilities
head(prog.glm$fitted.values/200)
#I will only give the first 6 to save space
head(prog.glm$fitted.values)
#I will only give the first 6 to save space
head(prog.glm$fitted.values)
#probabilities
head(prog.glm$fitted.values/200)
View(waferdata)
poiss.glm <- glm(count ~ particle + quality, data = waferdata, family = poisson)
summary(poiss.glm)
#First read in the data appropriately,
quality <- c("good", "good", "bad", "bad")
particle <- c("No","Yes", "No", "Yes")
count <- c(320,14,80,36)
waferdata <- data.frame(count, particle, quality)
wafetab <- xtabs(count ~ quality + particle, data = waferdata)
wafetab
wafetab[,1]/rowSums(wafetab)
poiss.glm <- glm(count ~ particle + quality, data = waferdata, family = poisson)
summary(poiss.glm)
#First read in the data appropriately,
quality <- c("good", "good", "bad", "bad")
particle <- c("No","Yes", "No", "Yes")
count <- c(320,14,80,36)
waferdata <- data.frame(count, particle, quality)
wafetab <- xtabs(count ~ particle + quality, data = waferdata)
wafetab
wafetab[,1]/rowSums(wafetab)
exp(summary(prog.glm)$coefficients)
#First read in the data appropriately,
quality <- c("good", "good", "bad", "bad")
particle <- c("No","Yes", "No", "Yes")
count <- c(320,14,80,36)
waferdata <- data.frame(count, particle, quality)
wafetab <- xtabs(count ~ particle + quality, data = waferdata)
wafetab
wafetab[,1]/rowSums(wafetab)
poiss.glm <- glm(count ~ particle + quality, data = waferdata, family = poisson)
summary(poiss.glm)
poiss.glm$fitted.values
poiss.dev <- deviance(poiss.glm)
poiss.dev
p_val <- pchisq(poiss.dev,1,lower=FALSE)
p_val
n <- sum(waferdata$count)
p0. <- sum(wafetab[,1])/n
p1. <-  sum(wafetab[,2])/n
p.0 <- sum(wafetab[1,])/n
p.1 <- sum(wafetab[2,])/n
p0.
p.0
p1.
p.1
pi.hatsm <- c(p0.*p.0, p0.*p.1,p1.*p.0, p1.*p.1) #by column
pi.hatsm
m.fits <- n*pi.hatsm
m.fits
#assume that 'no' is the baseline
#beta_0 = log(p_11/1- p11)
Beta_0 <- log(0.65975309/(1-0.65975309))
#beta_0 + beta_1 = log(p_22/1- p22)
temp <- log(0.08246914/(1-0.08246914))
Beta_1 <- temp - Beta_0
Beta_0
Beta_1
pp <- prop.table(xtabs(count~quality))
qp <- prop.table(xtabs(count~particle))
fitv<- (outer(qp,pp)*450)
dev<- 2*sum(wafetab*log(wafetab/fitv))
dev
p_val <- pchisq(dev,1,lower=FALSE)
p_val
#Binomial model (using formula for fitted values)
bin.glm <-  glm(wafetab~1, family=binomial)
pi.hatsb <- c(fitted(bin.glm), 1-fitted(bin.glm))
b.fits2  = rowSums(wafetab)*pi.hatsb
b.fits2
#assume that 'no' is the baseline
Beta_0 <- log(0.2577778/(1-0.2577778))
temp <- log(0.7422222/(1-0.7422222))
Beta_1 <- temp - Beta_0
Beta_0
Beta_1
dev<-deviance(bin.glm)
dev
p_value <- pchisq(dev,1,lower=FALSE)
p_value
#implement the given values
fisher.test(wafetab)
#implement the given values
fisher.test(wafetab, alt = 'greater')
#implement the given values
fisher.test(wafetab)
#First read in the data appropriately,
quality <- c("good", "good", "bad", "bad")
particle <- c("No","Yes", "No", "Yes")
count <- c(320,14,80,36)
waferdata <- data.frame(count, particle, quality)
wafetab <- xtabs(count ~ particle + quality, data = waferdata)
wafetab
wafetab[,1]/rowSums(wafetab)
poiss.glm <- glm(count ~ particle + quality, data = waferdata, family = poisson)
summary(poiss.glm)
poiss.glm$fitted.values
poiss.dev <- deviance(poiss.glm)
poiss.dev
p_val <- pchisq(poiss.dev,1,lower=FALSE)
p_val
n <- sum(waferdata$count)
p0. <- sum(wafetab[,1])/n
p1. <-  sum(wafetab[,2])/n
p.0 <- sum(wafetab[1,])/n
p.1 <- sum(wafetab[2,])/n
p0.
p.0
p1.
p.1
pi.hatsm <- c(p0.*p.0, p0.*p.1,p1.*p.0, p1.*p.1) #by column
pi.hatsm
m.fits <- n*pi.hatsm
m.fits
#assume that 'no' is the baseline
#beta_0 = log(p_11/1- p11)
Beta_0 <- log(0.65975309/(1-0.65975309))
#beta_0 + beta_1 = log(p_22/1- p22)
temp <- log(0.08246914/(1-0.08246914))
Beta_1 <- temp - Beta_0
Beta_0
Beta_1
pp <- prop.table(xtabs(count~quality))
qp <- prop.table(xtabs(count~particle))
fitv<- (outer(qp,pp)*450)
dev<- 2*sum(wafetab*log(wafetab/fitv))
dev
p_val <- pchisq(dev,1,lower=FALSE)
p_val
#Binomial model (using formula for fitted values)
bin.glm <-  glm(wafetab~1, family=binomial)
pi.hatsb <- c(fitted(bin.glm), 1-fitted(bin.glm))
b.fits2  = rowSums(wafetab)*pi.hatsb
b.fits2
#assume that 'no' is the baseline
Beta_0 <- log(0.2577778/(1-0.2577778))
temp <- log(0.7422222/(1-0.7422222))
Beta_1 <- temp - Beta_0
Beta_0
Beta_1
dev<-deviance(bin.glm)
dev
p_value <- pchisq(dev,1,lower=FALSE)
p_value
#implement the given values
fisher.test(wafetab)
#import the dataset
progData <- read.csv("program.csv")
library(nnet)
prog.glm <- multinom(prog~ses+write, data=progData)
summary(prog.glm)
#I will only give the first 6 to save space
head(prog.glm$fitted.values)
#probabilities
head(prog.glm$fitted.values/200)
prog.glm2 <- multinom(prog~ses,data=waferdata)
View(waferdata)
prog.glm2 <- multinom(prog~ses,data=progData)
pchisq(deviance(prog.glm2) - deviance(prog.glm), df=prog.glm$edf-rnes.glm2$edf, lower=F)
prog.glm2 <- multinom(prog~ses,data=progData)
pchisq(deviance(prog.glm2) - deviance(prog.glm), df=prog.glm$edf-prog.glm2$edf, lower=F)
#First read in the data appropriately,
quality <- c("good", "good", "bad", "bad")
particle <- c("No","Yes", "No", "Yes")
count <- c(320,14,80,36)
waferdata <- data.frame(count, particle, quality)
wafetab <- xtabs(count ~ particle + quality, data = waferdata)
wafetab
wafetab[,1]/rowSums(wafetab)
poiss.glm <- glm(count ~ particle + quality, data = waferdata, family = poisson)
summary(poiss.glm)
poiss.glm$fitted.values
poiss.dev <- deviance(poiss.glm)
poiss.dev
p_val <- pchisq(poiss.dev,1,lower=FALSE)
p_val
n <- sum(waferdata$count)
p0. <- sum(wafetab[,1])/n
p1. <-  sum(wafetab[,2])/n
p.0 <- sum(wafetab[1,])/n
p.1 <- sum(wafetab[2,])/n
p0.
p.0
p1.
p.1
pi.hatsm <- c(p0.*p.0, p0.*p.1,p1.*p.0, p1.*p.1) #by column
pi.hatsm
m.fits <- n*pi.hatsm
m.fits
library(nnet)
glms <- multinom(count~particle + quality, data=waferdata)
summary(glms)
Beta_0 <- log(0.65975309/0.22913580)
Beta_0
#First read in the data appropriately,
quality <- c("good", "good", "bad", "bad")
particle <- c("No","Yes", "No", "Yes")
count <- c(320,14,80,36)
waferdata <- data.frame(count, particle, quality)
wafetab <- xtabs(count ~ particle + quality, data = waferdata)
wafetab
wafetab[,1]/rowSums(wafetab)
poiss.glm <- glm(count ~ particle + quality, data = waferdata, family = poisson)
summary(poiss.glm)
poiss.glm$fitted.values
poiss.dev <- deviance(poiss.glm)
poiss.dev
p_val <- pchisq(poiss.dev,1,lower=FALSE)
p_val
n <- sum(waferdata$count)
p0. <- sum(wafetab[,1])/n
p1. <-  sum(wafetab[,2])/n
p.0 <- sum(wafetab[1,])/n
p.1 <- sum(wafetab[2,])/n
p0.
p.0
p1.
p.1
pi.hatsm <- c(p0.*p.0, p0.*p.1,p1.*p.0, p1.*p.1) #by column
pi.hatsm
m.fits <- n*pi.hatsm
m.fits
#assume that 'no' is the baseline
#beta_0 = log(p_11/1- p11)
Beta_0 <- log(0.65975309/(1-0.65975309))
#beta_0 + beta_1 = log(p_22/1- p22)
temp <- log(0.08246914/(1-0.08246914))
Beta_1 <- temp - Beta_0
Beta_0
Beta_1
pp <- prop.table(xtabs(count~quality))
qp <- prop.table(xtabs(count~particle))
fitv<- (outer(qp,pp)*450)
dev<- 2*sum(wafetab*log(wafetab/fitv))
dev
p_val <- pchisq(dev,1,lower=FALSE)
p_val
#Binomial model (using formula for fitted values)
bin.glm <-  glm(wafetab~1, family=binomial)
pi.hatsb <- c(fitted(bin.glm), 1-fitted(bin.glm))
b.fits2  = rowSums(wafetab)*pi.hatsb
b.fits2
#assume that 'no' is the baseline
Beta_0 <- log(0.2577778/(1-0.2577778))
temp <- log(0.7422222/(1-0.7422222))
Beta_1 <- temp - Beta_0
Beta_0
Beta_1
dev<-deviance(bin.glm)
dev
p_value <- pchisq(dev,1,lower=FALSE)
p_value
#implement the given values
fisher.test(wafetab)
#import the dataset
progData <- read.csv("program.csv")
library(nnet)
prog.glm <- multinom(prog~ses+write, data=progData)
summary(prog.glm)
#I will only give the first 6 to save space
head(prog.glm$fitted.values)
#probabilities
head(prog.glm$fitted.values/200)
prog.glm2 <- multinom(prog~ses,data=progData)
pchisq(deviance(prog.glm2) - deviance(prog.glm), df=prog.glm$edf-prog.glm2$edf, lower=F)
chisq.test(progData$prog, predict(prog.glm2))
progData$prog
predict(prog.glm2)
chisq.test(progData$prog, predict(prog.glm))
#First read in the data appropriately,
quality <- c("good", "good", "bad", "bad")
particle <- c("No","Yes", "No", "Yes")
count <- c(320,14,80,36)
waferdata <- data.frame(count, particle, quality)
wafetab <- xtabs(count ~ particle + quality, data = waferdata)
wafetab
wafetab[,1]/rowSums(wafetab)
poiss.glm <- glm(count ~ particle + quality, data = waferdata, family = poisson)
summary(poiss.glm)
poiss.glm$fitted.values
poiss.dev <- deviance(poiss.glm)
poiss.dev
p_val <- pchisq(poiss.dev,1,lower=FALSE)
p_val
n <- sum(waferdata$count)
p0. <- sum(wafetab[,1])/n
p1. <-  sum(wafetab[,2])/n
p.0 <- sum(wafetab[1,])/n
p.1 <- sum(wafetab[2,])/n
p0.
p.0
p1.
p.1
pi.hatsm <- c(p0.*p.0, p0.*p.1,p1.*p.0, p1.*p.1) #by column
pi.hatsm
m.fits <- n*pi.hatsm
m.fits
View(waferdata)
library(nnet)
prog.glm <- multinom(count~quality + particle, data=waferdata)
summary(prog.glm)
View(waferdata)
wafetab
#assume that 'no' is the baseline
#let us only find the model for the baseline versus 14 to save space
#baseline is also bad to quality and no to particle
#beta_ij = ln(p_ij/p_ik)
library(nnet)
glm.wafe <- multinom(count~quality + particle, data=waferdata)
summary(glm.wafe)
glm.wafe <- glm(count~quality + particle, family = binomial, data=waferdata)
wafetab
#assume that 'no' is the baseline
#beta_0 = log(p_11/p11)
#let us use multinom to find this
library(nnet)
wafeglm <- multinom(count~ particle + quality, data=waferdata)
summary(wafeglm)
deviance(wafeglm)
#import the dataset
progData <- read.csv("program.csv")
library(nnet)
prog.glm <- multinom(prog~ses+write, data=progData)
summary(prog.glm)
#First read in the data appropriately,
quality <- c("good", "good", "bad", "bad")
particle <- c("No","Yes", "No", "Yes")
count <- c(320,14,80,36)
waferdata <- data.frame(count, particle, quality)
wafetab <- xtabs(count ~ particle + quality, data = waferdata)
wafetab
wafetab[,1]/rowSums(wafetab)
poiss.glm <- glm(count ~ particle + quality, data = waferdata, family = poisson)
summary(poiss.glm)
poiss.glm$fitted.values
poiss.dev <- deviance(poiss.glm)
poiss.dev
p_val <- pchisq(poiss.dev,1,lower=FALSE)
p_val
n <- sum(waferdata$count)
p0. <- sum(wafetab[,1])/n
p1. <-  sum(wafetab[,2])/n
p.0 <- sum(wafetab[1,])/n
p.1 <- sum(wafetab[2,])/n
p0.
p.0
p1.
p.1
pi.hatsm <- c(p0.*p.0, p0.*p.1,p1.*p.0, p1.*p.1) #by column
pi.hatsm
m.fits <- n*pi.hatsm
m.fits
#assume that 'no' is the baseline
#beta_0 = log(p_11/p11)
Beta_0 <- log(0.65975309/(1-0.65975309))
#beta_0 + beta_1 = log(p_22/1- p22)
temp <- log(0.08246914/(1-0.08246914))
Beta_1 <- temp - Beta_0
Beta_0
Beta_1
pp <- prop.table(xtabs(count~quality))
qp <- prop.table(xtabs(count~particle))
fitv<- (outer(qp,pp)*450)
dev<- 2*sum(wafetab*log(wafetab/fitv))
dev
p_val <- pchisq(dev,1,lower=FALSE)
p_val
#Binomial model (using formula for fitted values)
bin.glm <-  glm(wafetab~1, family=binomial)
pi.hatsb <- c(fitted(bin.glm), 1-fitted(bin.glm))
b.fits2  = rowSums(wafetab)*pi.hatsb
b.fits2
#assume that 'no' is the baseline
Beta_0 <- log(0.2577778/(1-0.2577778))
temp <- log(0.7422222/(1-0.7422222))
Beta_1 <- temp - Beta_0
Beta_0
Beta_1
dev<-deviance(bin.glm)
dev
p_value <- pchisq(dev,1,lower=FALSE)
p_value
#implement the given values
fisher.test(wafetab)
library(nnet)
prog.glm <- multinom(quality~particle, data=waferdata)
summary(prog.glm)
library(nnet)
prog.glm <- multinom(quality~particle + count, data=waferdata)
summary(prog.glm)
wafetab
library(nnet)
prog.glm <- multinom(count~quality +particle, data=waferdata)
summary(prog.glm)
library(nnet)
prog.glm <- multinom(quality~count +particle, data=waferdata)
summary(prog.glm)
#assume that 'no' is the baseline
#beta_0 = log(p_11/p11)
library(nnet)
wafeglm <- multinom(quality~count +particle, data=waferdata)
summary(wafeglm)
a1<- c(11/6, -2/6, -2,6)
a2<- c(-2/6, 4/6,0)
a3<- c(-2/6,0,7/6)
A<-rbind(a1,a2,a3)
a1<- c(11/6, -2/6, -2/6)
A<-rbind(a1,a2,a3)
A
solve(A)
A <- 6*A
A
solve(A)
A <- A/6
A
solve(A)
r <- cbind(-63,-20,-33)
r
r''
t(r)
r <- rbind(-63,-20,-33)
r
solve(A)*r
solve(A)
solve(A)%*%r
M <- rbind(c(1/3,0,1/3,1/2), c(1/3,0,0,0), c(0,1/2,1/3,0))
M
Ya <- rbind(33,20,33,24)
M*Ya
M%*%Ya
y_b <- rbind(27,13,20)
y_b
y_b - M%*%Ya
r
r <- rbind(-12,2,-1)
A
solve(A)%*%r
t(solve(A)%*%r)%*%r
getwd()
setwd("C:/Users/User/Documents/SidhuAmandeep_HW4")
#read in the data set
df1 <- read.csv("winequality-red.csv")
View(df1)
library(tidymodels)
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
library(tidyverse)
remove.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
sessioninfo()
sessionInfo()
install.packages(c("blob", "broom", "cachem", "car", "caret", "classInt", "cli", "commonmark", "covr", "Cubist", "data.table", "dbplyr", "dendextend", "deSolve", "dplyr", "dtplyr", "ellipse", "emmeans", "FactoMineR", "fastmap", "Formula", "future", "gam", "ggsci", "ggsurvfit", "glmnet", "googledrive", "googlesheets4", "gtable", "hardhat", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "klaR", "lava", "lme4", "modelr", "multcomp", "openssl", "parallelly", "party", "pillar", "prodlim", "ps", "RcppArmadillo", "recipes", "rlang", "rmarkdown", "rstpm2", "scatterplot3d", "styler", "testthat", "tibble", "vctrs", "xfun"))
install.packages(c("blob", "broom", "cachem", "car", "caret", "classInt", "cli", "commonmark", "covr", "Cubist", "data.table", "dbplyr", "dendextend", "deSolve", "dplyr", "dtplyr", "ellipse", "emmeans", "FactoMineR", "fastmap", "Formula", "future", "gam", "ggsci", "ggsurvfit", "glmnet", "googledrive", "googlesheets4", "gtable", "hardhat", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "klaR", "lava", "lme4", "modelr", "multcomp", "openssl", "parallelly", "party", "pillar", "prodlim", "ps", "RcppArmadillo", "recipes", "rlang", "rmarkdown", "rstpm2", "scatterplot3d", "styler", "testthat", "tibble", "vctrs", "xfun"))
install.packages(c("blob", "broom", "cachem", "car", "caret", "classInt", "cli", "commonmark", "covr", "Cubist", "data.table", "dbplyr", "dendextend", "deSolve", "dplyr", "dtplyr", "ellipse", "emmeans", "FactoMineR", "fastmap", "Formula", "future", "gam", "ggsci", "ggsurvfit", "glmnet", "googledrive", "googlesheets4", "gtable", "hardhat", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "klaR", "lava", "lme4", "modelr", "multcomp", "openssl", "parallelly", "party", "pillar", "prodlim", "ps", "RcppArmadillo", "recipes", "rlang", "rmarkdown", "rstpm2", "scatterplot3d", "styler", "testthat", "tibble", "vctrs", "xfun"))
install.packages(c("blob", "broom", "cachem", "car", "caret", "classInt", "cli", "commonmark", "covr", "Cubist", "data.table", "dbplyr", "dendextend", "deSolve", "dplyr", "dtplyr", "ellipse", "emmeans", "FactoMineR", "fastmap", "Formula", "future", "gam", "ggsci", "ggsurvfit", "glmnet", "googledrive", "googlesheets4", "gtable", "hardhat", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "klaR", "lava", "lme4", "modelr", "multcomp", "openssl", "parallelly", "party", "pillar", "prodlim", "ps", "RcppArmadillo", "recipes", "rlang", "rmarkdown", "rstpm2", "scatterplot3d", "styler", "testthat", "tibble", "vctrs", "xfun"))
install.packages(c("blob", "broom", "cachem", "car", "caret", "classInt", "cli", "commonmark", "covr", "Cubist", "data.table", "dbplyr", "dendextend", "deSolve", "dplyr", "dtplyr", "ellipse", "emmeans", "FactoMineR", "fastmap", "Formula", "future", "gam", "ggsci", "ggsurvfit", "glmnet", "googledrive", "googlesheets4", "gtable", "hardhat", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "klaR", "lava", "lme4", "modelr", "multcomp", "openssl", "parallelly", "party", "pillar", "prodlim", "ps", "RcppArmadillo", "recipes", "rlang", "rmarkdown", "rstpm2", "scatterplot3d", "styler", "testthat", "tibble", "vctrs", "xfun"))
install.packages(c("blob", "broom", "cachem", "car", "caret", "classInt", "cli", "commonmark", "covr", "Cubist", "data.table", "dbplyr", "dendextend", "deSolve", "dplyr", "dtplyr", "ellipse", "emmeans", "FactoMineR", "fastmap", "Formula", "future", "gam", "ggsci", "ggsurvfit", "glmnet", "googledrive", "googlesheets4", "gtable", "hardhat", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "klaR", "lava", "lme4", "modelr", "multcomp", "openssl", "parallelly", "party", "pillar", "prodlim", "ps", "RcppArmadillo", "recipes", "rlang", "rmarkdown", "rstpm2", "scatterplot3d", "styler", "testthat", "tibble", "vctrs", "xfun"))
install.packages(c("blob", "broom", "cachem", "car", "caret", "classInt", "cli", "commonmark", "covr", "Cubist", "data.table", "dbplyr", "dendextend", "deSolve", "dplyr", "dtplyr", "ellipse", "emmeans", "FactoMineR", "fastmap", "Formula", "future", "gam", "ggsci", "ggsurvfit", "glmnet", "googledrive", "googlesheets4", "gtable", "hardhat", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "klaR", "lava", "lme4", "modelr", "multcomp", "openssl", "parallelly", "party", "pillar", "prodlim", "ps", "RcppArmadillo", "recipes", "rlang", "rmarkdown", "rstpm2", "scatterplot3d", "styler", "testthat", "tibble", "vctrs", "xfun"))
install.packages(c("blob", "broom", "cachem", "car", "caret", "classInt", "cli", "commonmark", "covr", "Cubist", "data.table", "dbplyr", "dendextend", "deSolve", "dplyr", "dtplyr", "ellipse", "emmeans", "FactoMineR", "fastmap", "Formula", "future", "gam", "ggsci", "ggsurvfit", "glmnet", "googledrive", "googlesheets4", "gtable", "hardhat", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "klaR", "lava", "lme4", "modelr", "multcomp", "openssl", "parallelly", "party", "pillar", "prodlim", "ps", "RcppArmadillo", "recipes", "rlang", "rmarkdown", "rstpm2", "scatterplot3d", "styler", "testthat", "tibble", "vctrs", "xfun"))
install.packages("tidymodels")
install.packages("tidymodels")
library(tidymodels)
install.packages(c("cli", "fastmap", "htmltools", "rlang", "xfun"))
library(tidymodels)
install.packages(c("cli", "fastmap", "htmltools", "rlang", "xfun"))
install.packages(c("cli", "fastmap", "htmltools", "rlang", "xfun"))
